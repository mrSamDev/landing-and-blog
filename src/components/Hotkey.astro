---
import { basics } from '../../cv.json';
import 'hotkeypad/index.css';
import 'hotkeypad/reset.css';

const { profiles } = basics;

const profilesInfo = profiles
    .map(({ network, url }) => {
        const firstLetter = network[0].toUpperCase();
        return {
            id: network,
            section: 'Social',
            title: `Visit my ${network}`,
            url,
            hotkey: `ctrl+${firstLetter}`
        };
    })
    .filter((x) => !x.hotkey.match(/[TNW]$/i));
---

<div class="w-full text-center bg-main fixed bottom-0 left-0 right-0 md:relative md:bottom-auto md:left-auto md:right-auto p-2 md:p-0 z-50">
    Press
    <kbd class="bg-accent-muted px-1 py-0.5 text-xs font-mono mx-1 rounded text-main">
        <span class="hidden mac:inline">âŒ˜</span>
        <span class="inline mac:hidden">Ctrl</span>
    </kbd>
    +
    <kbd class="bg-accent-muted px-1 py-0.5 text-xs font-mono mx-1 rounded text-main">K</kbd>
    to open the command palette
</div>

<div id="hotkeypad" class="bg-main" data-placeholder="Search Command" data-info={JSON.stringify(profilesInfo)}></div>

<script>
    interface Info {
        id: string;
        section: string;
        title: string;
        url: string;
        icon?: string;
        hotkey: string;
        handler?: () => void;
    }

    import HotKeyPad from 'hotkeypad';

    const hotkeypad = new HotKeyPad();
    const info = hotkeypad.instance.getAttribute('data-info') ?? '[]';
    const parsedInfo = JSON.parse(info) as Info[];

    const networkIcons = Object.fromEntries(
        Array.from(document.querySelectorAll('[data-network]')).map((e) => {
            const icon = e.querySelector('svg')?.cloneNode(true) as SVGSVGElement;
            icon.setAttribute('height', '24');
            icon.setAttribute('width', '24');
            return [e.getAttribute('data-network'), icon.outerHTML];
        })
    );

    const data = parsedInfo.map(({ url, hotkey, id, section, title }) => {
        return {
            id,
            title,
            icon: networkIcons[id],
            hotkey,
            section,
            handler: () => {
                window.open(url, '_blank');
            }
        };
    });

    hotkeypad.setCommands([
        {
            id: 'print',
            title: 'Open Resume',
            icon: `<svg style="margin-right: 8px" width="24" height="24" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
      </svg>`,
            hotkey: 'ctrl+P',
            section: 'Actions',
            handler: () => {
                window.open('https://drive.google.com/file/d/1aAr7PdCs66mvMawFckHUZEnwxXMu7_q0/view?usp=drive_link', '_blank', 'noopener,noreferrer');
            }
        },
        ...data,
        {
            id: 'source-code',
            title: 'View Source Code',
            icon: networkIcons['GitHub'],
            hotkey: 'ctrl+S',
            section: 'Misc',
            handler: () => {
                window.open('https://github.com/mrSamDev/landing-and-blog', '_blank', 'noopener,noreferrer');
            }
        }
    ]);
</script>

<style>
    @media (platform: apple) {
        .mac\:inline {
            display: inline;
        }
        .mac\:hidden {
            display: none;
        }
    }

    kbd {
        @apply bg-accent-muted text-main;
        border-radius: 4px;
        padding: 2px 4px;
        font-size: 12px;
    }

    #hotkeypad {
        --hotkeypad-bg-kbd: rgb(var(--color-accent-muted));
        --hotkeypad-bg-backdrop: rgb(var(--color-bg-main));
        --hotkeypad-bg-container: rgb(var(--color-bg-main));
        --hotkeypad-bg-item-hover: rgb(var(--color-accent-muted) / 0.1);
        --hotkeypad-border-container: rgb(var(--color-accent-muted));
        --hotkeypad-border-container-hover: rgb(var(--color-accent));
        --hotkeypad-fg-muted: rgb(var(--color-text-main));

        --hotkeypad-accent: rgb(var(--color-accent));
        --hotkeypad-accent-hover: rgb(var(--color-accent-muted));
        --hotkeypad-section-title: rgb(var(--color-text-main));
        --hotkeypad-item-selected: rgb(var(--color-accent) / 0.15);
        --hotkeypad-scrollbar: rgb(var(--color-accent-muted));
        --hotkeypad-scrollbar-hover: rgb(var(--color-accent));

        --hotkeypad-status-success: rgb(var(--color-success));
        --hotkeypad-status-warning: rgb(var(--color-warning));
        --hotkeypad-status-error: rgb(var(--color-error));
        --hotkeypad-status-info: rgb(var(--color-info));
    }
</style>
